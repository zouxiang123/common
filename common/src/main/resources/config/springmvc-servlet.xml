<?xml version="1.0" encoding="UTF-8"?>
<!-- ~ Copyright (c) 2014 jon -->

<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:task="http://www.springframework.org/schema/task"  
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

	<!-- 配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理 -->
	<!-- <resources mapping="/images/**" location="/images/" /> <resources mapping="/css/**" 
		location="/css/" /> <resources mapping="/js/**" location="/js/" /> <resources 
		mapping="/html/**" location="/html/" /> <resources mapping="/common/**" location="/common/" 
		/> -->

    <!--启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"></mvc:annotation-driven>
   	<!--   定时器自动注解 -->
    <task:annotation-driven/>
	<!--自动扫描com.xtt.[module].*.controller 包下的@Controller标注的类控制器类 -->
	<context:component-scan base-package="com.xtt.*.*.controller" />
	<!--自动扫描com.xtt.[module].*.job 包下的@Component标注的类控制器类 -->
	<context:component-scan base-package="com.xtt.*.*.job" />
	
	<!--对模型视图名称的解析，在请求时模型视图名称添加前后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- 上传文件 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<property name="maxUploadSize" value="60485760"></property>
	</bean>
	<!-- 国际化资源文件 -->
	<!-- <bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
				<property name="basename" value="properties/messages">
		</property>
	</bean> -->

	<!-- <bean name="captchaProducers"
		class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<prop key="kaptcha.image.width">300</prop>
						<prop key="kaptcha.image.height">60</prop>
						<prop key="kaptcha.textproducer.char.string">0123456789</prop>
						<prop key="kaptcha.textproducer.char.length">4</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean> -->

	<!--Web异常解析处理 -->
	<bean class="com.xtt.platform.exception.RdpHandlerExceptionResolver">
		<property name="order" value="0" />
		<!-- 定义默认的异常处理页面，当该异常类型的注册时使用 -->
		<property name="defaultErrorView" value="resource:error/500" />
		<!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exception -->
		<property name="exceptionAttribute" value="ex" />
		<!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 -->
		<property name="exceptionMappings">
			<util:map>
				<entry key="com.xtt.platform.exception.JsonResponseException"
					value="resource:/view/error/500" />
				<entry key="org.springframework.validation.BindException"
					value="resource:/view/error/500" />
			</util:map>
		</property>
	</bean>
	<!-- spring rest -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<!-- <property name="contentNegotiationManager" ref="contentNegotiationManager"></property>  --> 
		<property name="defaultViews">
			<list>
				<!-- for application/json -->
				<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
					<property name="objectMapper" ref="rdpMapper" />
				</bean>
				<!-- for application/xml -->
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<property name="marshaller" ref="rdpShaller" />
				</bean>
			</list>
		</property>
	</bean>
	
	<!-- 重新设置 contentNegotiationManager -->
 	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes">  
            <map>  
                <entry key="json" value="application/json"/>  
                <entry key="xml" value="application/xml"/>  
                <entry key="xls" value="application/vnd.ms-excel"/>  
            </map>  
        </property>  
        <property name="defaultContentType" value="application/json"/>  
    </bean> 
   	<!-- 重新设置 objectMapper -->
	<bean id="rdpMapper" class="com.fasterxml.jackson.databind.ObjectMapper">
		<!-- 设置objectMapper的serializationConfig的serializationInclusion属性，以忽略null对象 -->
		<property name="serializationInclusion">
            <value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
        </property>
        <!-- <property name="dateFormat">
            <bean class="java.text.SimpleDateFormat">
                <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
            </bean>
        </property> -->
	</bean>
	
	<!-- 重新设置 marshaller -->
	<bean id="rdpShaller" name="rdpShaller" class="org.springframework.oxm.castor.CastorMarshaller">
		<property name="validating" value="false" />
	</bean>
	
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="byteArrayHttpMessageConverter" />
				<ref bean="mappingJacksonHttpMessageConverter" />
				<ref bean="stringHttpMessageConverter" />
				<ref bean="marshallerHttpMessageConverter" />
				<ref bean="formHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<!-- 下载文件 -->
	<bean id="byteArrayHttpMessageConverter" class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/> 
	<!--完成json自动转换的映射  -->
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
			    <value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
				<value>application/x-www-form-urlencoded;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<bean id="marshallerHttpMessageConverter" class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
		<property name="marshaller" ref="rdpShaller" />
		<property name="unmarshaller" ref="rdpShaller" />
	</bean>
	<bean id="formHttpMessageConverter" class="org.springframework.http.converter.FormHttpMessageConverter" />
<!-- 	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManager">
        <constructor-arg>  
           <list>
	           <bean class="org.springframework.web.accept.FixedContentNegotiationStrategy">  
	                <constructor-arg>
                    	<value>text/html</value>
                   	</constructor-arg>  
	            </bean>  
	            <bean class="org.springframework.web.accept.PathExtensionContentNegotiationStrategy">  
	                <constructor-arg>  
	                    <map>  
	                        <entry key="json" value="application/json"/>  
	                        <entry key="xml" value="application/xml"/>  
	                    </map>  
	                </constructor-arg>  
	            </bean>
           </list>  
        </constructor-arg>  
    </bean>  -->
</beans>