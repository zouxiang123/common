package com.xtt.common.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Repository;

import com.xtt.common.dao.model.PatientDiagnosis;
import com.xtt.common.dao.po.PatientDiagnosisPO;

@Repository
public interface PatientDiagnosisMapper {
	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table patient_diagnosis
	 * 
	 * @mbggenerated Wed Sep 30 09:48:15 CST 2015
	 */
	int deleteByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table patient_diagnosis
	 * 
	 * @mbggenerated Wed Sep 30 09:48:15 CST 2015
	 */
	int insert(PatientDiagnosis record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table patient_diagnosis
	 * 
	 * @mbggenerated Wed Sep 30 09:48:15 CST 2015
	 */
	int insertSelective(PatientDiagnosis record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table patient_diagnosis
	 * 
	 * @mbggenerated Wed Sep 30 09:48:15 CST 2015
	 */
	PatientDiagnosis selectByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table patient_diagnosis
	 * 
	 * @mbggenerated Wed Sep 30 09:48:15 CST 2015
	 */
	int updateByPrimaryKeySelective(PatientDiagnosis record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table patient_diagnosis
	 * 
	 * @mbggenerated Wed Sep 30 09:48:15 CST 2015
	 */
	int updateByPrimaryKey(PatientDiagnosis record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table patient_diagnosis
	 * 
	 * @mbggenerated Wed Sep 30 09:48:15 CST 2015
	 */
	PatientDiagnosis selectByPatientId(@Param("patientId") Long patientId, @Param("tenantId") Integer tenantId);

	Integer countByPatientId(@Param("patientId") Long patientId, @Param("tenantId") Integer tenantId);

	/**
	 * 根据患者查询当前的首次诊断内容
	 * 
	 * @Title: selectCurrentByPatientId
	 * @param patientId
	 * @return
	 * 
	 */
	List<PatientDiagnosis> selectCurrentByPatientId(Long patientId);

	/**
	 * 查询所有未完成的首次诊断内容
	 * 
	 * @Title: selectUnfinished
	 * @return
	 * 
	 */
	List<PatientDiagnosisPO> selectUnfinished(@Param("name") String name, @Param("tenantId") Integer tenantId);

}