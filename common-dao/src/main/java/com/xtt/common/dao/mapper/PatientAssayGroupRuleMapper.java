package com.xtt.common.dao.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Repository;

import com.xtt.common.dao.model.PatientAssayGroupRule;
import com.xtt.common.dao.po.PatientAssayGroupRulePO;

@Repository
public interface PatientAssayGroupRuleMapper {
    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table patient_assay_group_rule
     * 
     * @mbggenerated Tue May 17 19:33:15 CST 2016
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table patient_assay_group_rule
     * 
     * @mbggenerated Tue May 17 19:33:15 CST 2016
     */
    int insert(PatientAssayGroupRule record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table patient_assay_group_rule
     * 
     * @mbggenerated Tue May 17 19:33:15 CST 2016
     */
    int insertSelective(PatientAssayGroupRule record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table patient_assay_group_rule
     * 
     * @mbggenerated Tue May 17 19:33:15 CST 2016
     */
    PatientAssayGroupRule selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table patient_assay_group_rule
     * 
     * @mbggenerated Tue May 17 19:33:15 CST 2016
     */
    int updateByPrimaryKeySelective(PatientAssayGroupRule record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table patient_assay_group_rule
     * 
     * @mbggenerated Tue May 17 19:33:15 CST 2016
     */
    int updateByPrimaryKey(PatientAssayGroupRule record);

    // 自定义
    /**
     * 根据条件查询患者化验项的分组规则
     * 
     * @Title: selectByCondition
     * @param record
     * @return
     * 
     */
    List<PatientAssayGroupRulePO> selectByCondition(PatientAssayGroupRule record);

    /**
     * 批量新增
     * 
     * @return
     */
    int saveByBatch(PatientAssayGroupRule[] patientAssayGroupRule);

    /**
     * 通过查询某个对象来修改
     */
    void updateBySelective(PatientAssayGroupRulePO patientAssayGroupRulePO);

    /**
     * 通过ID来查询对象
     * 
     * @param id
     * @return
     */
    PatientAssayGroupRulePO selectPatientAssayGroupRulePOById(Long id);

    /**
     * 通过传进来的值在数据库中是否存在
     * 
     * @Title: selectExitsByInput
     * @param inputValue
     * @param itemCode
     * @param fkTenantId
     * @return
     *
     */
    List<PatientAssayGroupRulePO> selectExitsByInput(@Param("inputValue") Float inputValue, @Param("itemCode") String itemCode,
                    @Param("fkTenantId") Integer fkTenantId);

    /**
     * 通过ItemCode来查询
     * 
     * @Title: selectByItemCode
     * @param itemCode
     * @param fkTenantId
     * @return
     *
     */
    List<PatientAssayGroupRulePO> selectByItemCode(@Param("itemCode") String itemCode, @Param("fkTenantId") Integer fkTenantId);

    /**
     * 删除所有关于ItemCode的数据
     * 
     * @param itemCode
     * @param fkTenantId
     */
    void deleteByItemCode(@Param("itemCode") String itemCode, @Param("fkTenantId") Integer fkTenantId);
}
