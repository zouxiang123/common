<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xtt.common.dao.mapper.SysTenantMapper">
  <resultMap id="BaseResultMap" type="com.xtt.common.dao.model.SysTenant">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
     <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="is_enable" jdbcType="BIT" property="isEnable" />
    <result column="start_date" jdbcType="DATE" property="startDate" />
    <result column="end_date" jdbcType="DATE" property="endDate" />
    <result column="is_default" jdbcType="BIT" property="isDefault" />
    <result column="group_flag" jdbcType="BIT" property="groupFlag" />
    <result column="license" jdbcType="VARCHAR" property="license" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_user_id" jdbcType="BIGINT" property="createUserId" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_user_id" jdbcType="BIGINT" property="updateUserId" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
    id, name, is_enable, start_date, end_date, is_default, group_flag, license, create_time, 
    create_user_id, update_time, update_user_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
    select 
    <include refid="Base_Column_List" />
    from sys_tenant
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
    delete from sys_tenant
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xtt.common.dao.model.SysTenant">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
    insert into sys_tenant (id, name, is_enable, 
      start_date, end_date, is_default, 
      group_flag, license, create_time, 
      create_user_id, update_time, update_user_id
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{isEnable,jdbcType=BIT}, 
      #{startDate,jdbcType=DATE}, #{endDate,jdbcType=DATE}, #{isDefault,jdbcType=BIT}, 
      #{groupFlag,jdbcType=BIT}, #{license,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{createUserId,jdbcType=BIGINT}, #{updateTime,jdbcType=TIMESTAMP}, #{updateUserId,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.xtt.common.dao.model.SysTenant">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
    insert into sys_tenant
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="isEnable != null">
        is_enable,
      </if>
      <if test="startDate != null">
        start_date,
      </if>
      <if test="endDate != null">
        end_date,
      </if>
      <if test="isDefault != null">
        is_default,
      </if>
      <if test="groupFlag != null">
        group_flag,
      </if>
      <if test="license != null">
        license,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createUserId != null">
        create_user_id,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateUserId != null">
        update_user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="isEnable != null">
        #{isEnable,jdbcType=BIT},
      </if>
      <if test="startDate != null">
        #{startDate,jdbcType=DATE},
      </if>
      <if test="endDate != null">
        #{endDate,jdbcType=DATE},
      </if>
      <if test="isDefault != null">
        #{isDefault,jdbcType=BIT},
      </if>
      <if test="groupFlag != null">
        #{groupFlag,jdbcType=BIT},
      </if>
      <if test="license != null">
        #{license,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUserId != null">
        #{updateUserId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xtt.common.dao.model.SysTenant">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
    update sys_tenant
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="isEnable != null">
        is_enable = #{isEnable,jdbcType=BIT},
      </if>
      <if test="startDate != null">
        start_date = #{startDate,jdbcType=DATE},
      </if>
      <if test="endDate != null">
        end_date = #{endDate,jdbcType=DATE},
      </if>
      <if test="isDefault != null">
        is_default = #{isDefault,jdbcType=BIT},
      </if>
      <if test="groupFlag != null">
        group_flag = #{groupFlag,jdbcType=BIT},
      </if>
      <if test="license != null">
        license = #{license,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        create_user_id = #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUserId != null">
        update_user_id = #{updateUserId,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xtt.common.dao.model.SysTenant">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
    update sys_tenant
    set name = #{name,jdbcType=VARCHAR},
      is_enable = #{isEnable,jdbcType=BIT},
      start_date = #{startDate,jdbcType=DATE},
      end_date = #{endDate,jdbcType=DATE},
      is_default = #{isDefault,jdbcType=BIT},
      group_flag = #{groupFlag,jdbcType=BIT},
      license = #{license,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user_id = #{createUserId,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_user_id = #{updateUserId,jdbcType=BIGINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- user define -->
  <select id="listByCondition" parameterType="com.xtt.common.dao.model.SysTenant" resultMap="BaseResultMap">
    select t.* from sys_tenant t
    <where>
      <if test="name != null">
        t.name = #{name}
      </if>
      <if test="isEnable != null">
        AND t.is_enable = #{isEnable}
      </if>
      <if test="startDate != null">
        AND t.start_date = #{startDate}
      </if>
      <if test="endDate != null">
        AND t.end_date = #{endDate}
      </if>
      <if test="isDefault != null">
        AND t.is_default = #{isDefault}
      </if>
      <if test="groupFlag != null">
        AND t.group_flag = #{groupFlag}
      </if>
    </where>
    ORDER BY t.id
  </select>
  
  <!-- 根据账户名称查询对应的租户数据 -->
  <select id="listByAccount" resultMap="BaseResultMap">
    select t.* from sys_tenant t
    JOIN sys_user_tenant ut ON ut.fk_tenant_id = t.id
    JOIN sys_user u ON u.id = ut.fk_user_id
    WHERE ut.sys_owner = #{sysOwner} AND u.account = #{account}
  </select>
  <!-- 根据集团id查询对应的租户 -->
  <select id="listByGroupId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select t.* from sys_tenant t
    join sys_group_tenant gt ON t.id = gt.fk_tenant_id
    where gt.fk_group_id = #{groupId}
  </select>
  <!-- 根据多个租户id查询数据 -->
  <select id="listByIds" resultMap="BaseResultMap">
    select t.* from sys_tenant t where id in <foreach collection="ids" item="item" open="(" separator="," close=")">#{item}</foreach>
  </select>
<<<<<<< HEAD
  <insert id="savaSysTenant" parameterType="com.xtt.common.dao.model.SysTenant">
     insert into sys_tenant (id, name, is_enable, 
      start_date, end_date, is_default, 
      group_flag, create_time, create_user_id, 
      update_time, update_user_id)
    values (getPrimaryKey('10000SysTenant'), #{name,jdbcType=VARCHAR}, #{isEnable,jdbcType=BIT}, 
      #{startDate,jdbcType=DATE}, #{endDate,jdbcType=DATE}, #{isDefault,jdbcType=BIT}, 
      #{groupFlag,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP}, #{createUserId,jdbcType=BIGINT}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{updateUserId,jdbcType=BIGINT})
  
  </insert>
   <!-- 更新新插入并发症字典中pid 这列 表中内关联 -->
    <update id="updateComplicationDictionary">
        update complication_dictionary set p_id = concat(#{fkTenantId},SUBSTR(p_id,6,10)) where fk_tenant_id = #{fkTenantId} and p_id != 0
    </update>
    <!-- 更新预估配置表pid 表中设计为内关联 -->
    <update id="updateMedicalOrderDict">
        update medical_order_dict set pid = concat(#{fkTenantId},SUBSTR(pid,6,10)) where fk_tenant_id = #{fkTenantId} and pid is not null
    </update>
    <update id="updateSupplies">
     update Supplies set p_id = concat(#{fkTenantId},SUBSTR(p_id,6,10)) where fk_tenant_id = #{fkTenantId} and p_id != 0
    </update>
    <!-- 质控上传化验项配置 -->
    <insert id="saveZkAssayRef">
        INSERT INTO zk_assay_ref (
        `id`, `fk_item_code`, `item_code`, `item_name`, `channel`, `fk_tenant_id`
        )
        SELECT
        null, `fk_item_code`,
        `item_code`, `item_name`, `channel`, #{fkTenantId}
        from zk_assay_ref where fk_tenant_id = #{template}
    </insert>
    <!-- 医嘱套餐和医嘱项目的关系表 -->
    <insert id="saveMedicalOrderDictRPackage">
        INSERT INTO medical_order_dict_r_package (
        `pid`, `cid`, `numb`, `usage_code`, `drug_time_type`, `fk_tenant_id`, `create_time`,
        `create_user_id`, `update_time`, `update_user_id`
        )
        SELECT concat(#{fkTenantId},substr(pid,6,10)), concat(#{fkTenantId},substr(cid,6,10)),
        `numb`,
        `usage_code`, `drug_time_type`, #{fkTenantId}, now(), `create_user_id`, now(),
        `update_user_id`
        from medical_order_dict_r_package where
        fk_tenant_id = #{template}
    </insert>
    <!-- 获取字典表中的列名 -->
    <select id="listTablePropertyName" resultType="String">
        Select COLUMN_NAME
        From information_schema.columns
        Where table_name=#{tableName} and table_schema = #{tableSchema}
    </select>
    <!-- 通用方法初始化数据 -->
    <insert id="saveSysBasiCsGroup" statementType="STATEMENT">
         INSERT INTO ${tableName} (
        ${tablePropertys}
        )
        SELECT
       ${newtablePropertys}
        from
        ${tableName} where fk_tenant_id = ${param.template}
    </insert>
    <!-- 获取主键id -->
    <select id="setPrimaryKeyById" resultType="String">
        SELECT getPrimaryKey(#{tableName}) from dual
    </select>
  <!-- 根据父id查询数据 -->
  <select id="listByPTenantId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select t.* from sys_tenant t
    join sys_group_tenant gt ON t.id = gt.fk_tenant_id
    where gt.p_tenant_id = #{pTenantId}
  </select>
</mapper>