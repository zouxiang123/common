<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xtt.common.dao.mapper.SysUserMapper">
  <resultMap id="BaseResultMap" type="com.xtt.common.dao.model.SysUser">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="account" jdbcType="VARCHAR" property="account" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="initial" jdbcType="VARCHAR" property="initial" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="image_path" jdbcType="VARCHAR" property="imagePath" />
    <result column="autograph_path" jdbcType="VARCHAR" property="autographPath" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="birthday" jdbcType="DATE" property="birthday" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="del_flag" jdbcType="BIT" property="delFlag" />
    <result column="user_type" jdbcType="VARCHAR" property="userType" />
    <result column="fk_tenant_id" jdbcType="INTEGER" property="fkTenantId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_user_id" jdbcType="BIGINT" property="createUserId" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_user_id" jdbcType="BIGINT" property="updateUserId" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
    id, account, name, initial, password, image_path, autograph_path, sex, birthday, 
    mobile, del_flag, user_type, fk_tenant_id, create_time, create_user_id, update_time, 
    update_user_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
    select 
    <include refid="Base_Column_List" />
    from sys_user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
    delete from sys_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.xtt.common.dao.model.SysUser">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
    insert into sys_user (id, account, name, 
      initial, password, image_path, 
      autograph_path, sex, birthday, 
      mobile, del_flag, user_type, 
      fk_tenant_id, create_time, create_user_id, 
      update_time, update_user_id)
    values (#{id,jdbcType=BIGINT}, #{account,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{initial,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{imagePath,jdbcType=VARCHAR}, 
      #{autographPath,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, #{birthday,jdbcType=DATE}, 
      #{mobile,jdbcType=VARCHAR}, #{delFlag,jdbcType=BIT}, #{userType,jdbcType=VARCHAR}, 
      #{fkTenantId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{createUserId,jdbcType=BIGINT}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{updateUserId,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.xtt.common.dao.model.SysUser">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
    insert into sys_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="account != null">
        account,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="initial != null">
        initial,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="imagePath != null">
        image_path,
      </if>
      <if test="autographPath != null">
        autograph_path,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="mobile != null">
        mobile,
      </if>
      <if test="delFlag != null">
        del_flag,
      </if>
      <if test="userType != null">
        user_type,
      </if>
      <if test="fkTenantId != null">
        fk_tenant_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createUserId != null">
        create_user_id,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateUserId != null">
        update_user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="initial != null">
        #{initial,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="imagePath != null">
        #{imagePath,jdbcType=VARCHAR},
      </if>
      <if test="autographPath != null">
        #{autographPath,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=DATE},
      </if>
      <if test="mobile != null">
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=BIT},
      </if>
      <if test="userType != null">
        #{userType,jdbcType=VARCHAR},
      </if>
      <if test="fkTenantId != null">
        #{fkTenantId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUserId != null">
        #{updateUserId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xtt.common.dao.model.SysUser">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
    update sys_user
    <set>
      <if test="account != null">
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="initial != null">
        initial = #{initial,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="imagePath != null">
        image_path = #{imagePath,jdbcType=VARCHAR},
      </if>
      <if test="autographPath != null">
        autograph_path = #{autographPath,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=DATE},
      </if>
      <if test="mobile != null">
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=BIT},
      </if>
      <if test="userType != null">
        user_type = #{userType,jdbcType=VARCHAR},
      </if>
      <if test="fkTenantId != null">
        fk_tenant_id = #{fkTenantId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        create_user_id = #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUserId != null">
        update_user_id = #{updateUserId,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xtt.common.dao.model.SysUser">
    <!--
      WARNING - @mbggenerated, do not modify!
    -->
    update sys_user
    set account = #{account,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      initial = #{initial,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      image_path = #{imagePath,jdbcType=VARCHAR},
      autograph_path = #{autographPath,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=DATE},
      mobile = #{mobile,jdbcType=VARCHAR},
      del_flag = #{delFlag,jdbcType=BIT},
      user_type = #{userType,jdbcType=VARCHAR},
      fk_tenant_id = #{fkTenantId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user_id = #{createUserId,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_user_id = #{updateUserId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
	
	<!-- 自定义 -->
	<resultMap extends="BaseResultMap" id="ExtendResultMap" type="com.xtt.common.dao.po.SysUserPO" />
	<select id="searchPersonByName" resultMap="ExtendResultMap">
		SELECT
			u.id, u.name, u.image_path,u.sex
            ,ut.role_type roleType
		FROM sys_user u 
        JOIN sys_user_tenant ut ON u.id = ut.fk_user_id    
        WHERE u.del_flag=0
        AND ut.fk_tenant_id = #{tenantId}
        AND ut.role_type in <foreach close=")" collection="roleTypes" item="item" open="(" separator=",">#{item}</foreach>
        <if test="sysOwner != null and sysOwner != ''">
            AND ut.sys_owner = #{sysOwner}
        </if>
        ORDER BY ut.role_type ASC
	</select>

	<select id="selectByParentRoleIds" resultMap="ExtendResultMap">
        SELECT u.*
            , ut.role_type roleType, ut.telephone, ut.position
        FROM sys_user u
        JOIN sys_user_tenant ut ON u.id = ut.fk_user_id
        WHERE u.del_flag=0
        AND ut.fk_tenant_id = #{tenantId}
        AND ut.role_type in <foreach close=")" collection="roleIds" item="item" open="(" separator=",">#{item}</foreach>
        <if test="sysOwner != null and sysOwner != ''">
            AND ut.sys_owner = #{sysOwner}
        </if>
        ORDER BY u.initial ASC
	</select>
	
	<select id="getById" parameterType="java.lang.Long" resultMap="ExtendResultMap">
		SELECT u.* FROM sys_user u WHERE u.id = #{id}
	</select>
	<!-- 根据租户id，所属系统，是否删除查询数据 -->
	<select id="listByTenantId" resultMap="ExtendResultMap">
		SELECT
			u.*
            ,ut.role_type roleType, ut.telephone, ut.position, ut.skin
			,GROUP_CONCAT(r.`name`) as roleName,group_concat(r.id) as roleId
		FROM
			sys_user u
        JOIN sys_user_tenant ut on ut.fk_user_id = u.id
		JOIN sys_user2role ur ON ur.fk_user_id = u.id
		JOIN sys_role r ON ur.fk_role_id = r.id and r.fk_tenant_id = ut.fk_tenant_id
        <if test="sysOwner != null and sysOwner != ''">
            AND r.sys_owner = #{sysOwner}
        </if>
		WHERE ut.fk_tenant_id=#{fkTenantId}
        <if test="delFlag != null">
          AND u.del_flag=#{delFlag}
        </if>
        <if test="sysOwner != null and sysOwner != ''">
            AND ut.sys_owner = #{sysOwner}
        </if>
		GROUP BY u.id
		ORDER BY u.id ASC
	</select>
	<!-- 根据条件查询用户管理的用户列表 -->
	<select id="selectUserWithFilter" parameterType="com.xtt.common.dao.model.SysUser" resultMap="ExtendResultMap">
		SELECT
			u.id,u.account,u.birthday,u.mobile,u.`name`,u.user_type,u.del_flag
            ,GROUP_CONCAT(DISTINCT ut.telephone) telephone
            ,GROUP_CONCAT(DISTINCT r.`name`) as roleName
            ,GROUP_CONCAT(r.`id`) as roleId
            ,GROUP_CONCAT(st.name)  as  multiTenantName
		FROM
			sys_user u
		LEFT JOIN sys_user2role sr ON sr.fk_user_id = u.id
        JOIN sys_user_tenant ut on ut.fk_user_id = u.id
         JOIN sys_tenant st ON ut.fk_tenant_id=st.id
		LEFT JOIN sys_role r ON sr.fk_role_id = r.id and r.sys_owner = ut.sys_owner and r.fk_tenant_id = ut.fk_tenant_id
		where u.del_flag=0
        <!-- 非集团用户根据用户所属哪些租户进行查询 -->
        <if test="groupFlag == null or !groupFlag">
            AND ut.fk_tenant_id=#{fkTenantId}
        </if>
        <!-- 集团用户根据用户创建该用户的租户进行查询 -->
        <if test="groupFlag != null and groupFlag">
            AND u.fk_tenant_id=#{fkTenantId}
        </if>
		<if test="account != null and account != ''">
			and u.account like CONCAT("%",#{account},"%")
		</if>
		<if test="name != null and name != ''">
			and u.name like CONCAT("%",#{name},"%")
		</if>
		<if test="mobile != null and mobile != ''">
			and u.mobile like CONCAT("%",#{mobile},"%")
		</if>
        <if test="sysOwner != null and sysOwner != ''">
            AND ut.sys_owner = #{sysOwner}
        </if>
		GROUP BY u.id,u.account,u.birthday,u.mobile,u.`name`,u.del_flag
		ORDER BY u.del_flag,u.id ASC
	</select>
	
	<select id="selectUserByAccount" resultMap="BaseResultMap">
		select u.* from sys_user u
        JOIN sys_user_tenant ut on ut.fk_user_id = u.id
		where u.del_flag=0
		and u.account=#{account,jdbcType=VARCHAR} and ut.fk_tenant_id=#{tenantId}
		<if test="sysOwner != null and sysOwner != ''">
            and ut.sys_owner = #{sysOwner}
	    </if> 
	</select>
	
	<select id="login" resultMap="ExtendResultMap">
		select u.*
            ,group_concat(ur.fk_role_id) as roleId
            ,ut.role_type roleType, ut.telephone, ut.position, ut.skin
		from sys_user u 
        inner join sys_user2role ur on u.id=ur.fk_user_id
        JOIN sys_user_tenant ut on ut.fk_user_id = u.id
        inner join sys_role r on ur.fk_role_id = r.id and r.sys_owner = ut.sys_owner and r.fk_tenant_id = ut.fk_tenant_id
		where u.del_flag=0
		and u.account=#{account} 
		and u.password=#{password} 
		and ut.fk_tenant_id=#{tenantId}
		<if test="sysOwner != null and sysOwner != ''">
			and ut.sys_owner = #{sysOwner}
		</if>
        GROUP BY u.id
	</select>
	
	<select id="selectRolesCount" resultType="map">
		SELECT count(DISTINCT u.id) AS count,ut.role_type roleType FROM sys_user u
        JOIN sys_user_tenant ut on ut.fk_user_id = u.id
		WHERE u.del_flag=0 AND ut.fk_tenant_id =#{tenantId}
		<if test="sysOwner != null and sysOwner != ''">
            and ut.sys_owner = #{sysOwner}
	    </if> 
        group by ut.role_type
	</select>
	
	<update id="updatePassword">
		update sys_user set password = #{password} where id= #{id}
	</update>
    <!-- 查询所有用户 -->
    <select id="listAll" resultMap="ExtendResultMap">
        select u.* from sys_user u
    </select>
    <!-- 根据用户id和租户id查询包含角色数据的用户对象 -->
    <select id="getFullById" resultMap="ExtendResultMap">
        select u.*
            ,group_concat(ur.fk_role_id) as roleId
            ,ut.role_type roleType, ut.telephone, ut.position, ut.skin
            ,utt.sysOwner, utt.multiTenant
        from sys_user u 
        LEFT join sys_user2role ur on u.id=ur.fk_user_id
        JOIN sys_user_tenant ut on ut.fk_user_id = u.id
        JOIN (SELECT fk_user_id, group_concat(DISTINCT sys_owner) sysOwner, group_concat(DISTINCT fk_tenant_id) multiTenant 
                FROM `sys_user_tenant` WHERE fk_user_id = #{id} GROUP BY fk_user_id) utt ON utt.fk_user_id = u.id
        LEFT join sys_role r on ur.fk_role_id = r.id and r.sys_owner = ut.sys_owner and r.fk_tenant_id =#{tenantId}
        where u.id=#{id} AND ut.fk_tenant_id = #{tenantId}
        <if test="sysOwner != null and sysOwner != ''">
            and ut.sys_owner = #{sysOwner}
        </if> 
        GROUP BY u.id
    </select>
    
    <!-- 根据id和集团id查询集团用户数据 -->
    <select id="getGroupFullById" resultMap="ExtendResultMap">
        SELECT u.*
               , group_concat(DISTINCT ut.fk_tenant_id) multiTenant
        FROM sys_user u 
        LEFT JOIN sys_user_tenant ut on ut.fk_user_id = u.id
        WHERE u.id=#{id} AND u.fk_tenant_id = #{tenantId}
        GROUP BY u.id
    </select>
    <!-- 集团管理员登陆 -->
    <select id="groupAdminLogin" resultMap="ExtendResultMap">
        SELECT u.* FROM sys_user u 
        WHERE u.account = #{account} AND u.password = #{password} AND u.user_type = #{userType} AND u.fk_tenant_id = #{fkTenantId}
    </select>
    <!-- 根据账户名称查询集团用户 -->
    <select id="getGroupUserByAccount" resultMap="BaseResultMap">
        SELECT u.* FROM sys_user u 
        WHERE u.account = #{account} AND u.user_type = #{userType}
        <if test="fkTenantId != null">
            AND u.fk_tenant_id = #{fkTenantId}
        </if>
    </select>
    
    <select id="checkUser" parameterType="com.xtt.common.dao.po.SysUserPO" resultMap="ExtendResultMap">
        SELECT u.name ,st.`name` as multiTenantName  FROM sys_user u 
        JOIN sys_user_tenant sut ON u.id=sut.fk_user_id 
        JOIN sys_tenant st ON sut.fk_tenant_id=st.id  
        WHERE u.account=#{account} AND u.fk_tenant_id in(${multiTenant}) 
    </select>
    
    <select id="selectByAccount" parameterType="String" resultMap="ExtendResultMap">
        SELECT su.account,su.`password`,sut.fk_tenant_id FROM sys_user su JOIN sys_user_tenant sut ON su.id=sut.fk_user_id WHERE su.account=#{account}
    </select>
    
    <!-- 获取随机护士 -->
    <select id="getRoundUser" resultMap="BaseResultMap">
        SELECT u.* FROM sys_user u
        JOIN sys_user2role sr ON sr.fk_user_id = u.id
        JOIN sys_role r ON sr.fk_role_id = r.id
        WHERE r.constant_type=#{constantType} AND r.fk_tenant_id = #{fkTenantId} ORDER BY RAND() LIMIT 1;
    </select>
</mapper>