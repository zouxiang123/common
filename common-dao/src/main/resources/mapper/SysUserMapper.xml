<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xtt.common.dao.mapper.SysUserMapper">
  <resultMap id="BaseResultMap" type="com.xtt.common.dao.model.SysUser">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 27 11:34:08 CST 2016.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="account" jdbcType="VARCHAR" property="account" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="initial" jdbcType="VARCHAR" property="initial" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="image_path" jdbcType="VARCHAR" property="imagePath" />
    <result column="autograph_path" jdbcType="VARCHAR" property="autographPath" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="birthday" jdbcType="DATE" property="birthday" />
    <result column="position" jdbcType="VARCHAR" property="position" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="sub_phone" jdbcType="VARCHAR" property="subPhone" />
    <result column="sys_owner" jdbcType="VARCHAR" property="sysOwner" />
    <result column="del_flag" jdbcType="BIT" property="delFlag" />
    <result column="fk_tenant_id" jdbcType="INTEGER" property="fkTenantId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_user_id" jdbcType="BIGINT" property="createUserId" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_user_id" jdbcType="BIGINT" property="updateUserId" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 27 11:34:08 CST 2016.
    -->
    id, account, name, initial, password, image_path, autograph_path, sex, birthday, position, mobile,
    sub_phone, sys_owner, del_flag, fk_tenant_id, create_time, create_user_id, update_time, 
    update_user_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 27 11:34:08 CST 2016.
    -->
    select 
    <include refid="Base_Column_List" />
    from sys_user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 27 11:34:08 CST 2016.
    -->
    delete from sys_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.xtt.common.dao.model.SysUser">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 27 11:34:08 CST 2016.
    -->
    insert into sys_user (id, account, name, 
      initial, password, image_path, autograph_path,
      sex, birthday, position, 
      mobile, sub_phone, sys_owner, 
      del_flag, fk_tenant_id, create_time, 
      create_user_id, update_time, update_user_id
      )
    values (#{id,jdbcType=BIGINT}, #{account,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{initial,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{imagePath,jdbcType=VARCHAR}, #{autographPath,jdbcType=VARCHAR},
      #{sex,jdbcType=VARCHAR}, #{birthday,jdbcType=DATE}, #{position,jdbcType=VARCHAR}, 
      #{mobile,jdbcType=VARCHAR}, #{subPhone,jdbcType=VARCHAR}, #{sysOwner,jdbcType=VARCHAR}, 
      #{delFlag,jdbcType=BIT}, #{fkTenantId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{createUserId,jdbcType=BIGINT}, #{updateTime,jdbcType=TIMESTAMP}, #{updateUserId,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.xtt.common.dao.model.SysUser">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 27 11:34:08 CST 2016.
    -->
    insert into sys_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="account != null">
        account,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="initial != null">
        initial,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="imagePath != null">
        image_path,
      </if>
      <if test="autographPath != null">
        autograph_path,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="position != null">
        position,
      </if>
      <if test="mobile != null">
        mobile,
      </if>
      <if test="subPhone != null">
        sub_phone,
      </if>
      <if test="sysOwner != null">
        sys_owner,
      </if>
      <if test="delFlag != null">
        del_flag,
      </if>
      <if test="fkTenantId != null">
        fk_tenant_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createUserId != null">
        create_user_id,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateUserId != null">
        update_user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="initial != null">
        #{initial,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="imagePath != null">
        #{imagePath,jdbcType=VARCHAR},
      </if>
      <if test="autographPath != null">
        #{autographPath,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=DATE},
      </if>
      <if test="position != null">
        #{position,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="subPhone != null">
        #{subPhone,jdbcType=VARCHAR},
      </if>
      <if test="sysOwner != null">
        #{sysOwner,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=BIT},
      </if>
      <if test="fkTenantId != null">
        #{fkTenantId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUserId != null">
        #{updateUserId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xtt.common.dao.model.SysUser">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 27 11:34:08 CST 2016.
    -->
    update sys_user
    <set>
      <if test="account != null">
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="initial != null">
        initial = #{initial,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="imagePath != null">
        image_path = #{imagePath,jdbcType=VARCHAR},
      </if>
      <if test="autographPath != null">
        autograph_path = #{autographPath, jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=DATE},
      </if>
      <if test="position != null">
        position = #{position,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="subPhone != null">
        sub_phone = #{subPhone,jdbcType=VARCHAR},
      </if>
      <if test="sysOwner != null">
        sys_owner = #{sysOwner,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=BIT},
      </if>
      <if test="fkTenantId != null">
        fk_tenant_id = #{fkTenantId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        create_user_id = #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUserId != null">
        update_user_id = #{updateUserId,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xtt.common.dao.model.SysUser">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Jun 27 11:34:08 CST 2016.
    -->
    update sys_user
    set account = #{account,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      initial = #{initial,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      image_path = #{imagePath,jdbcType=VARCHAR},
      autograph_path = #{autographPath,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=DATE},
      position = #{position,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      sub_phone = #{subPhone,jdbcType=VARCHAR},
      sys_owner = #{sysOwner,jdbcType=VARCHAR},
      del_flag = #{delFlag,jdbcType=BIT},
      fk_tenant_id = #{fkTenantId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user_id = #{createUserId,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_user_id = #{updateUserId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
	
	<!-- 自定义 -->
	<resultMap id="ExtendResultMap" extends="BaseResultMap" type="com.xtt.common.dao.po.SysUserPO">
	  <result column="roleId" property="roleId" jdbcType="VARCHAR" />
	  <result column="roleName" property="roleName" jdbcType="VARCHAR" />
	  <result column="last_step" property="lastStep" jdbcType="INTEGER" />
	</resultMap>
	<select id="searchPersonByName" resultMap="ExtendResultMap">
		SELECT
			u.id, u.name, '医生' roleName,null, u.image_path, u.autograph_path
		FROM
			sys_user u inner join sys_user2role ur on u.id=ur.fk_user_id
			inner join sys_role r on ur.fk_role_id=r.id and r.parent_id=2
		where u.fk_tenant_id=#{tenantId} AND u.del_flag=0
	      <if test="name != null" >
	      	and u.name like CONCAT('%', #{name}, '%')
	      </if>
	      <if test="sysOwner != null and sysOwner != ''" >
	    	AND find_in_set(#{sysOwner},u.sys_owner)
	      </if> 
		union all
		SELECT
			u.id, u.name, '护士' roleName,null, u.image_path, u.autograph_path
		FROM
			sys_user u inner join sys_user2role ur on u.id=ur.fk_user_id
			inner join sys_role r on ur.fk_role_id=r.id and r.parent_id=3
		where u.fk_tenant_id=#{tenantId} AND u.del_flag=0
	      <if test="name != null" >
	      	and u.name like CONCAT('%', #{name}, '%')
	      </if>
		  <if test="sysOwner != null and sysOwner != ''" >
	    	AND find_in_set(#{sysOwner},u.sys_owner)
	      </if> 
	</select>

	<select id="selectByParentRoleIds" resultMap="ExtendResultMap">
		SELECT u.*,sr.parent_id as parentRoleId FROM sys_user u
		JOIN sys_user2role su ON su.fk_user_id = u.id
		JOIN sys_role sr ON sr.id = su.fk_role_id
		WHERE u.fk_tenant_id =#{tenantId,jdbcType=INTEGER}
		AND u.del_flag=0
		AND sr.parent_id in 
		<foreach collection="roleIds" item="item" index="index" open="(" separator="," close=")">
			#{item}
		</foreach>
		<if test="sysOwner != null and sysOwner != ''" >
	      	AND find_in_set(#{sysOwner},u.sys_owner)
	     </if>
		GROUP BY u.id
		ORDER BY u.initial ASC;
	</select>
	
	<select id="selectPOById" parameterType="java.lang.Long" resultMap="ExtendResultMap">
		SELECT
	    	u.*
	    	,GROUP_CONCAT(sr.fk_role_id) AS roleId,GROUP_CONCAT(r.parent_id) AS parentRoleId
		FROM
			sys_user u
		LEFT JOIN sys_user2role sr ON sr.fk_user_id = u.id
		LEFT JOIN sys_role r ON sr.fk_role_id = r.id
		WHERE
			u.id = #{id,jdbcType=BIGINT}
        GROUP BY u.id
	</select>
	
	<select id="selectAllUserByTenantId" resultMap="ExtendResultMap">
		SELECT
			u.*
			,GROUP_CONCAT(r.`name`) as roleName,group_concat(r.id) as roleId,group_concat(r.parent_id) as parentRoleId
		FROM
			sys_user u
		JOIN sys_user2role sr ON sr.fk_user_id = u.id
		JOIN sys_role r ON sr.fk_role_id = r.id
		where u.fk_tenant_id=#{tenantId,jdbcType=INTEGER}
		AND u.del_flag=0
		<if test="sysOwner != null and sysOwner != ''" >
	      	AND find_in_set(#{sysOwner},u.sys_owner)
	     </if>
		GROUP BY u.id
		ORDER BY u.id ASC
	</select>
	
	<select id="selectUserWithFilter" parameterType="com.xtt.common.dao.model.SysUser" resultMap="ExtendResultMap"> 
		SELECT
			u.id,u.account,u.birthday,u.mobile,u.`name`,u.sub_phone,GROUP_CONCAT(r.`name`) as roleName,GROUP_CONCAT(r.`id`) as roleId,u.del_flag delFlag
		FROM
			sys_user u
		JOIN sys_user2role sr ON sr.fk_user_id = u.id
		JOIN sys_role r ON sr.fk_role_id = r.id
		where u.fk_tenant_id=#{fkTenantId,jdbcType=INTEGER}  
		<if test="account != null and account != ''" >
			and u.account like CONCAT("%",#{account,jdbcType=VARCHAR},"%")
		</if>
		<if test="name != null and name != ''" >
			and u.name like CONCAT("%",#{name,jdbcType=VARCHAR},"%")
		</if>
		<if test="mobile != null and mobile != ''" >
			and u.mobile like CONCAT("%",#{mobile,jdbcType=VARCHAR},"%")
		</if>
		<if test="sysOwner != null and sysOwner != ''" >
	      	AND find_in_set(#{sysOwner},u.sys_owner)
	     </if>
		GROUP BY u.id,u.account,u.birthday,u.mobile,u.`name`,u.sub_phone
		ORDER BY u.del_flag,u.id ASC
	</select>
	
	<select id="selectUserByAccount" resultMap="BaseResultMap">
		select * from sys_user 
		where del_flag=0
		and account=#{account,jdbcType=VARCHAR}
		<!-- and fk_tenant_id=#{tenantId,jdbcType=INTEGER} -->
		<if test="sysOwner != null and sysOwner != ''" >
	    	AND find_in_set(#{sysOwner},sys_owner)
	    </if> 
	</select>
	
	<select id="login" resultMap="ExtendResultMap">
		select u.*,group_concat(r.id) as roleId,group_concat(r.parent_id) as parentRoleId
		from sys_user u inner join sys_user2role ur on u.id=ur.fk_user_id
		inner join sys_role r on ur.fk_role_id = r.id
		where u.del_flag=0
		and u.account=#{account,jdbcType=VARCHAR} 
		and u.password=#{password,jdbcType=VARCHAR} 
		<!-- and u.fk_tenant_id=#{tenantId,jdbcType=INTEGER} -->
		<if test="sysOwner != null and sysOwner != ''" >
			and find_in_set(#{sysOwner},u.sys_owner)
		</if>
	</select>
	
	<select id="selectRolesCount" resultType="map">
		SELECT count(DISTINCT u.id) AS count,sr.parent_id AS roleType FROM sys_user u
		JOIN sys_user2role su ON su.fk_user_id = u.id
		JOIN sys_role sr ON sr.id = su.fk_role_id
		WHERE u.del_flag=0
		AND u.fk_tenant_id =#{tenantId,jdbcType=INTEGER}
		<if test="sysOwner != null and sysOwner != ''" >
	    	AND find_in_set(#{sysOwner},u.sys_owner)
	    </if> 
		GROUP BY sr.parent_id
	</select>
	
	<update id="updatePassword">
		update sys_user set password = #{password} where id= #{id}
	</update>
</mapper>
